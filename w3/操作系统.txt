##进程进程的三态（五态）	运行  就绪  等待(堵塞)	进程死锁	如果一个进程在等待一个不可能发生的事，则进程就死锁了。而如果一个或者多个进程产生死锁，就会造成系统死锁。	死锁发生的必要条件：互斥条件：即一个资源每次只能被一个进程使用，在操作系统中这是真实存在的情况。保持和等待条件：有一个进程已获得了一些资源，但因请求其他资源被堵塞时，对已获得的资源保持不放。不剥夺条件：有些系统资源是不可剥夺的，当某个进程已获得这种资源后，系统不能强行收回，只能由进程使用完时自己释放。环路等待条件：若干个进程形成环链，每个都占用对方要申请的下一个资源。解决死锁的策略死锁预防：降低效率死锁避免：增加开销银行家算法：投资是否能得到回报前趋图PV操作同步、互斥的概念生产者-消费者问题互斥：千军万马过独木桥临界资源：多个进程间需要以互斥方式对其进行共享的资源，如打印机、磁带机等临界区：每个进程中访问临界资源的那段代码称为临界区信号量：一种特殊的变量P操作：也称为down(),wait()操作，使S=S-1，若S<0，进程暂停执行，放入信号量的等待队列；V操作：也称up(),signal()操作，使S=S+1,若S<=0,唤醒等待队列中的一个进程；单缓冲区生产者、消费者问题PV原语描述：生产者： 生产一个产品   P(S1); 送产品到缓冲区 V(S2)消费者： 从缓冲区取产品 P(S2); 消费产品       V(S1)S1的初始值为1，S2初始值为0读者写者问题有两组并发进程：读者和写者，共享一组数据区。要求：	允许多个读者同时执行读操作；	不允许读者、写者同时操作；	不允许多个写者同时操作；	描述：如果读者来：	1）无读者、写者，新读者可以读	2）有写者等，但有其他读者正在读，则新读者也可以读（读者优先）	3）有读者写，新读者等	如果写者来：	1）无读者，新写者可以写	2）有读者，新写者等待	3）有其他写者，新写者等待	// TODO	PV操作描述： 	读者：	while(true){	P(mutex);		readcount++;		if(readcount==1)			P(w)	V(mutex);		读	P(mutex);		readcount--;		if(readcount==0)			V(w);		V(mutex);	}	写者：	while(1) {		P(w);		写		V(w);	}	采用P-V同步机制来编写并发程序，对于共享变量及信号量的操作将被分散到各个进程中；p-v操作具有以下缺点：	1）易读性差。要了解对于一组共享变量及信号量的操作是否正确，则必须通过读整个程序或者并发程序；	2）不利于修改和维护。因为程序的局部性很差，所以任何一组变量或者一段代码的修改都可能影响全局；	3）准确性难以保证。因为操作系统或并发程序通常很大，要保证这样一个复杂的系统没有逻辑错误是很难的。	鉴于以上缺点，提出了 管程 的概念	管程是指关于共享资源的数据及在其上操作的一组过程或共享数据结构及其规定的所有操作。	##存储	虚存管理		程序的装入（重定位） // TODO 示意图			静态重定位：在虚空间程序执行之前由装配程序完成地址映射工作；			动态重定位：在程序执行过程中，在CPU访问内存之前，将要访问的程序或数据地址转换为内存地址；				页式存储组织			页号 + 页内地址			优点：利用率高，产生的内存碎片小，内存间分配及管理简单。			缺点：要有相应的硬件支持，增加了系统开销；请求调页的算法如选择不当，有可能产生抖动现象。		段式存储组织			段号 + 段内地址			优点：便于多道程序共享内存，便于对存储器的保护，各段程序修改互不影响。						缺点：内存利用率低，内存碎片浪费大。					段页式存储组织			优点：空间浪费小、存储共享容易、存储保护容易、能动态连接。						缺点：由于管理软件的增加，复杂性和开销也随之增加，需要的硬件以及占用的内容也有所增加，使得执行速度大大下降。				实存管理	存储管理的任务是存储空间的分配与回收。在现代操作系统中通常有单一连续分配、固定分区分配、可变分区分配三种分配方法：// TODO 分配示意图分配方法	单一连续分配|	固定分区分配|	可变分区分配分配类型	静态分配法|		静态分配法|		动态分配法分配特点	不分区，所有用户空间给某个进程或作业|			分成大小不等的区域，区域分完后固定不变|			分成大小不等的区域，根据用户要求动态分配说明：要求越高越灵活的分配方法实现起来复杂度越高，需要消耗的资源也越多在可变分区分配方式中，当有新作业申请分配内存时所采用的存储分配算法有以下四种：最佳适应法：选择等于或最接近作业需求的内存自由区进行分配。这种方法可以减少碎片，但同时也可能带来更多小得无法再用的碎片。首次适应法：从主存低地址开始，寻找第一个可用（即大于等于作业需求的内存）的自由区。这种方法可实现快速分配，缩短查找时间。最差适应法：选择整个主存中最大的自由区。循环首次适应算法：是首次适应法的一个变种，也就是不再是每次都从头开始匹配，而是连续向下匹配。页面置换算法	最优算法（OPT）	先进先出（FIFO）算法	最近最少使用（LRU）	局部性原理	时间局部性；	空间局部性；	例子：	int i,s=0;	for(i=1;i<1000;i++)		for(j=1;j<1000;j++)			s+=j;	printf("result is:%d", s)	##作业作业由三部分构成，即程序、数据和作业说明书，它是用户在完成一项任务过程中要求计算机系统所做工作的集合。作业的状态有后备状态、运行状态和完成状态三种。作业调度算法	先来先服务算法（FCFS）	最短作业优先（SJF）	最高响应比优先算法	定时轮转	优先数	作业周转时间	单个作业的周转时间：Ti=Tei-Tsi，Ti=Twi+Tri其中Tei为作业i的完成时间，Tsi为作业i的提交时间。	作业平均周转时间：T=(T1+T2+...+Tn)/n		带权周转时间	响应比	##文件管理文件目录	1.一级目录结构	2.二级目录结构	3.树形目录结构（√）	SPOOLING技术																	